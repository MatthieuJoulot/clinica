# coding: utf8


def init_input_node(t1w, recon_all_args, output_dir):
    """Initialize the pipeline.

    This function will:
        - Extract <image_id> (e.g. sub-CLNC01_ses-M00) T1w filename;
        - Check FOV of T1w;
        - Create SUBJECTS_DIR for recon-all (otherwise, the command won't run);
        - Print begin execution message.
    """
    import os

    from clinica.utils.filemanip import get_subject_id
    from clinica.utils.freesurfer import check_flags
    from clinica.utils.ux import print_begin_image

    # Extract <image_id>
    image_id = get_subject_id(t1w)

    # Check flags for T1w
    flags = check_flags(t1w, recon_all_args)

    # Create SUBJECTS_DIR for recon-all (otherwise, the command won't run)
    subjects_dir = os.path.join(output_dir, image_id)
    os.makedirs(subjects_dir, exist_ok=True)

    print_begin_image(image_id, ["ReconAllArgs"], [flags])

    return image_id, t1w, flags, subjects_dir


def write_tsv_files(subjects_dir, image_id):
    """
    Generate statistics TSV files in `subjects_dir`/regional_measures folder for `image_id`.

    Notes:
        We do not need to check the line "finished without error" in scripts/recon-all.log.
        If an error occurs, it will be detected by Nipype and the next nodes (including
        write_tsv_files will not be called).
    """
    import os

    from clinica.utils.freesurfer import generate_regional_measures
    from clinica.utils.stream import cprint

    if os.path.isfile(os.path.join(subjects_dir, image_id, "mri", "aparc+aseg.mgz")):
        generate_regional_measures(subjects_dir, image_id)
    else:
        cprint(
            msg=(
                f"{image_id.replace('_', ' | ')} does not contain "
                f"mri/aseg+aparc.mgz file. Creation of regional_measures/ folder will be skipped."
            ),
            lvl="warning",
        )
    return image_id


def save_to_caps(source_dir, image_id, caps_dir, overwrite_caps=False):
    """Save `source_dir`/`image_id`/ to CAPS folder.

    This function copies FreeSurfer segmentation and regional_measures folder of `source_dir`/`image_id`/ to
    `caps_dir`/subjects/<participant_id>/<session_id>/t1_freesurfer_cross_sectional/
    where `image_id` = <participant_id>_<session_id>.

    The `source_dir`/`image_id`/ folder should contain the following elements:
        - fsaverage, lh.EC_average and rh.EC_average symbolic links automatically generated by recon-all
        - `image_id`/ folder containing the FreeSurfer segmentation
        - regional_measures/ folder containing TSV files

    Notes:
        We do not need to check the line "finished without error" in scripts/recon-all.log.
        If an error occurs, it will be detected by Nipype and the next nodes (i.e.  save_to_caps will not be called).
    """
    import os
    import shutil

    from clinica.utils.stream import cprint
    from clinica.utils.ux import print_end_image

    participant_id = image_id.split("_")[0]
    session_id = image_id.split("_")[1]

    destination_dir = os.path.join(
        os.path.expanduser(caps_dir),
        "subjects",
        participant_id,
        session_id,
        "t1",
        "freesurfer_cross_sectional",
    )

    # Save FreeSurfer segmentation
    representative_file = os.path.join(image_id, "mri", "aparc+aseg.mgz")
    representative_source_file = os.path.join(
        os.path.expanduser(source_dir), image_id, representative_file
    )
    representative_destination_file = os.path.join(destination_dir, representative_file)
    if os.path.isfile(representative_source_file):
        if os.path.isfile(representative_destination_file):
            if overwrite_caps:
                shutil.rmtree(destination_dir)
                shutil.copytree(
                    src=os.path.join(source_dir, image_id, image_id),
                    dst=os.path.join(destination_dir, image_id),
                    symlinks=True,
                )
                shutil.copytree(
                    src=os.path.join(source_dir, image_id, "regional_measures"),
                    dst=os.path.join(destination_dir, "regional_measures"),
                    symlinks=True,
                )
        else:
            shutil.copytree(
                src=os.path.join(source_dir, image_id, image_id),
                dst=os.path.join(destination_dir, image_id),
                symlinks=True,
            )
            shutil.copytree(
                src=os.path.join(source_dir, image_id, "regional_measures"),
                dst=os.path.join(destination_dir, "regional_measures"),
                symlinks=True,
            )
        print_end_image(image_id)
    else:
        cprint(
            msg=f"{image_id.replace('_', ' | ')} does not contain mri/aseg+aparc.mgz file. Copy will be skipped.",
            lvl="warning",
        )
    return image_id


def compute_atlases(
    segmentation_path, subject_id, to_process_with_atlas, path_to_atlas
):
    import os
    import subprocess
    from pathlib import Path

    larousse = {}
    for path in Path(path_to_atlas).rglob("*6p0.gcs"):
        hemisphere = os.path.split(path)[1].rsplit(".")[0]
        atlas_name = os.path.split(path)[1].rsplit(".")[1].split("_")[0]
        if subject_id == to_process_with_atlas[atlas_name]:
            print("qqch")

        # atlas_file = hemisphere + "." +  atlas_name + "_6p0.gcs"
        # larousse.update({atlas_name:atlas_name})
        # print("le meilleur dico est:", larousse)

        # output_path_annot = segmentation_path + "/" + subject_id + "/label/" + hemisphere + "." + atlas_name + ".annot"
        # command = f"mris_ca_label /{subject_id} {hemisphere} {segmentation_path}/{subject_id}/surf/{hemisphere}.sphere.reg {path} {output_path_annot}"
        # a = subprocess.run(command, shell=True, capture_output=True)

        # output_path_stats = segmentation_path + "/" +subject_id + "/stats/"+hemisphere +"." + atlas_name + ".stats"
        # command2 = f"mris_anatomical_stats -a {output_path_annot} -f {output_path_stats} -b {subject_id} {hemisphere}"
        # c = subprocess.run(command2, shell=True, capture_output=True)

    return larousse
